/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../common";

export interface StakingPlatformInterface extends utils.Interface {
  functions: {
    "claim()": FunctionFragment;
    "rewardDelay()": FunctionFragment;
    "rewardPercentage()": FunctionFragment;
    "setRewardDelay(uint256)": FunctionFragment;
    "setRewardPercentage(uint256)": FunctionFragment;
    "setUnstakeDelay(uint256)": FunctionFragment;
    "stake(uint256)": FunctionFragment;
    "unstake()": FunctionFragment;
    "unstakeDelay()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "claim"
      | "rewardDelay"
      | "rewardPercentage"
      | "setRewardDelay"
      | "setRewardPercentage"
      | "setUnstakeDelay"
      | "stake"
      | "unstake"
      | "unstakeDelay"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "claim", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "rewardDelay",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardPercentage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setRewardDelay",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setRewardPercentage",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setUnstakeDelay",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "stake", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "unstake", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "unstakeDelay",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rewardDelay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardPercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRewardDelay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRewardPercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setUnstakeDelay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stake", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unstake", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "unstakeDelay",
    data: BytesLike
  ): Result;

  events: {
    "RewardDelayChanged(uint256)": EventFragment;
    "RewardRateChanged(uint256)": EventFragment;
    "UnstakeDelayChanged(uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "RewardDelayChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardRateChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UnstakeDelayChanged"): EventFragment;
}

export interface RewardDelayChangedEventObject {
  rewardDelay: BigNumber;
}
export type RewardDelayChangedEvent = TypedEvent<
  [BigNumber],
  RewardDelayChangedEventObject
>;

export type RewardDelayChangedEventFilter =
  TypedEventFilter<RewardDelayChangedEvent>;

export interface RewardRateChangedEventObject {
  rewardPercentage: BigNumber;
}
export type RewardRateChangedEvent = TypedEvent<
  [BigNumber],
  RewardRateChangedEventObject
>;

export type RewardRateChangedEventFilter =
  TypedEventFilter<RewardRateChangedEvent>;

export interface UnstakeDelayChangedEventObject {
  unstakeDelay: BigNumber;
}
export type UnstakeDelayChangedEvent = TypedEvent<
  [BigNumber],
  UnstakeDelayChangedEventObject
>;

export type UnstakeDelayChangedEventFilter =
  TypedEventFilter<UnstakeDelayChangedEvent>;

export interface StakingPlatform extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: StakingPlatformInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    claim(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rewardDelay(overrides?: CallOverrides): Promise<[BigNumber]>;

    rewardPercentage(overrides?: CallOverrides): Promise<[BigNumber]>;

    setRewardDelay(
      newRewardDelay: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setRewardPercentage(
      newRewardPercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setUnstakeDelay(
      newUnstakeDelay: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stake(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unstake(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unstakeDelay(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  claim(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rewardDelay(overrides?: CallOverrides): Promise<BigNumber>;

  rewardPercentage(overrides?: CallOverrides): Promise<BigNumber>;

  setRewardDelay(
    newRewardDelay: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setRewardPercentage(
    newRewardPercentage: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setUnstakeDelay(
    newUnstakeDelay: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stake(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unstake(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unstakeDelay(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    claim(overrides?: CallOverrides): Promise<void>;

    rewardDelay(overrides?: CallOverrides): Promise<BigNumber>;

    rewardPercentage(overrides?: CallOverrides): Promise<BigNumber>;

    setRewardDelay(
      newRewardDelay: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setRewardPercentage(
      newRewardPercentage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setUnstakeDelay(
      newUnstakeDelay: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    stake(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    unstake(overrides?: CallOverrides): Promise<void>;

    unstakeDelay(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "RewardDelayChanged(uint256)"(
      rewardDelay?: BigNumberish | null
    ): RewardDelayChangedEventFilter;
    RewardDelayChanged(
      rewardDelay?: BigNumberish | null
    ): RewardDelayChangedEventFilter;

    "RewardRateChanged(uint256)"(
      rewardPercentage?: BigNumberish | null
    ): RewardRateChangedEventFilter;
    RewardRateChanged(
      rewardPercentage?: BigNumberish | null
    ): RewardRateChangedEventFilter;

    "UnstakeDelayChanged(uint256)"(
      unstakeDelay?: BigNumberish | null
    ): UnstakeDelayChangedEventFilter;
    UnstakeDelayChanged(
      unstakeDelay?: BigNumberish | null
    ): UnstakeDelayChangedEventFilter;
  };

  estimateGas: {
    claim(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rewardDelay(overrides?: CallOverrides): Promise<BigNumber>;

    rewardPercentage(overrides?: CallOverrides): Promise<BigNumber>;

    setRewardDelay(
      newRewardDelay: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setRewardPercentage(
      newRewardPercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setUnstakeDelay(
      newUnstakeDelay: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stake(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unstake(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unstakeDelay(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    claim(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rewardDelay(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rewardPercentage(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setRewardDelay(
      newRewardDelay: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setRewardPercentage(
      newRewardPercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setUnstakeDelay(
      newUnstakeDelay: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stake(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unstake(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unstakeDelay(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
