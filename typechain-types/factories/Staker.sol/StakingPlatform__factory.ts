/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  StakingPlatform,
  StakingPlatformInterface,
} from "../../Staker.sol/StakingPlatform";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "lpToken",
        type: "address",
      },
      {
        internalType: "address",
        name: "rewardToken",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "rewardDelay",
        type: "uint256",
      },
    ],
    name: "RewardDelayChanged",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "rewardPercentage",
        type: "uint256",
      },
    ],
    name: "RewardRateChanged",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "unstakeDelay",
        type: "uint256",
      },
    ],
    name: "UnstakeDelayChanged",
    type: "event",
  },
  {
    inputs: [],
    name: "claim",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "rewardDelay",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "rewardPercentage",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "newRewardDelay",
        type: "uint256",
      },
    ],
    name: "setRewardDelay",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "newRewardPercentage",
        type: "uint256",
      },
    ],
    name: "setRewardPercentage",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "newUnstakeDelay",
        type: "uint256",
      },
    ],
    name: "setUnstakeDelay",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "stake",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "unstake",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "unstakeDelay",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405260146000556102586001556104b060025534801561002157600080fd5b5060405161066c38038061066c8339810160408190526100409161009d565b600480546001600160a01b039384166001600160a01b03199182161790915560058054929093169181169190911790915560038054909116331790556100d0565b80516001600160a01b038116811461009857600080fd5b919050565b600080604083850312156100b057600080fd5b6100b983610081565b91506100c760208401610081565b90509250929050565b61058d806100df6000396000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c80634e71d92d116100665780634e71d92d146100e357806352830ab2146100eb57806352d472eb146100fe57806370fe1ad114610107578063a694fc3a1461011057600080fd5b806309653674146100985780632def6620146100ad57806330b75e04146100b55780633222012f146100c8575b600080fd5b6100ab6100a636600461047f565b610123565b005b6100ab610186565b6100ab6100c336600461047f565b610269565b6100d160025481565b60405190815260200160405180910390f35b6100ab6102c6565b6100ab6100f936600461047f565b610396565b6100d160005481565b6100d160015481565b6100ab61011e36600461047f565b6103f3565b6003546001600160a01b031633146101565760405162461bcd60e51b815260040161014d90610498565b60405180910390fd5b600081815560405182917f1e3be2efa25bca5bff2215c7b30b31086e703d6aa7d9b9a1f8ba62c5291219ad91a250565b336000908152600660205260409020600181015442116101e15760405162461bcd60e51b8152602060048201526016602482015275139bdd1a1a5b99c81d1bc81d5b9cdd185ad9481e595d60521b604482015260640161014d565b8054600080835560018301556004805460405163a9059cbb60e01b81523392810192909252602482018390526001600160a01b03169063a9059cbb906044015b6020604051808303816000875af1158015610240573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061026491906104bf565b505050565b6003546001600160a01b031633146102935760405162461bcd60e51b815260040161014d90610498565b600281905560405181907f528808ea48954eb234cc0b7729dd9212e631876273c63182ba05df55c9c1c92490600090a250565b3360009081526006602090815260409182902082516060810184528154815260018201549281019290925260020154918101829052904211156103425760405162461bcd60e51b8152602060048201526014602482015273139bdd1a1a5b99c81d1bc818db185a5b481e595d60621b604482015260640161014d565b600080548251606491610354916104fe565b61035e919061051d565b60055460405163a9059cbb60e01b8152336004820152602481018390529192506001600160a01b03169063a9059cbb90604401610221565b6003546001600160a01b031633146103c05760405162461bcd60e51b815260040161014d90610498565b600181905560405181907ff6d5312e0ee5be025ff575cd9c7f1306e9d1e34e645e913a30213129d0788d2490600090a250565b33600090815260066020526040902060025461040f904261053f565b60018083019190915554610423904261053f565b600282015580548290829060009061043c90849061053f565b9091555050600480546040516323b872dd60e01b81523392810192909252306024830152604482018490526001600160a01b0316906323b872dd90606401610221565b60006020828403121561049157600080fd5b5035919050565b6020808252600d908201526c139bdd08185d1a1bdc9a5e9959609a1b604082015260600190565b6000602082840312156104d157600080fd5b815180151581146104e157600080fd5b9392505050565b634e487b7160e01b600052601160045260246000fd5b6000816000190483118215151615610518576105186104e8565b500290565b60008261053a57634e487b7160e01b600052601260045260246000fd5b500490565b60008219821115610552576105526104e8565b50019056fea2646970667358221220d7f7b8bcdf0ad4bd4c22f8d3fd7d54ee2a3b0300c1730e263d793431242c8f1564736f6c634300080d0033";

type StakingPlatformConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: StakingPlatformConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class StakingPlatform__factory extends ContractFactory {
  constructor(...args: StakingPlatformConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    lpToken: string,
    rewardToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<StakingPlatform> {
    return super.deploy(
      lpToken,
      rewardToken,
      overrides || {}
    ) as Promise<StakingPlatform>;
  }
  override getDeployTransaction(
    lpToken: string,
    rewardToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(lpToken, rewardToken, overrides || {});
  }
  override attach(address: string): StakingPlatform {
    return super.attach(address) as StakingPlatform;
  }
  override connect(signer: Signer): StakingPlatform__factory {
    return super.connect(signer) as StakingPlatform__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): StakingPlatformInterface {
    return new utils.Interface(_abi) as StakingPlatformInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): StakingPlatform {
    return new Contract(address, _abi, signerOrProvider) as StakingPlatform;
  }
}
