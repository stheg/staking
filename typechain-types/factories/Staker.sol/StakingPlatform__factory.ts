/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  StakingPlatform,
  StakingPlatformInterface,
} from "../../Staker.sol/StakingPlatform";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "stakingToken",
        type: "address",
      },
      {
        internalType: "address",
        name: "rewardToken",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "rewardDelay",
        type: "uint256",
      },
    ],
    name: "RewardDelayChanged",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "rewardPercentage",
        type: "uint256",
      },
    ],
    name: "RewardRateChanged",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "unstakeDelay",
        type: "uint256",
      },
    ],
    name: "UnstakeDelayChanged",
    type: "event",
  },
  {
    inputs: [],
    name: "claim",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "staker",
        type: "address",
      },
    ],
    name: "getDetails",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "reward",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "lastStakeDate",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "lastRewardDate",
            type: "uint256",
          },
        ],
        internalType: "struct StakingPlatform.Stake",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getRewardDelay",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getRewardPercentage",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getUnstakeDelay",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bool",
        name: "value",
        type: "bool",
      },
    ],
    name: "setLock",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "newRewardDelay",
        type: "uint256",
      },
    ],
    name: "setRewardDelay",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "newRewardPercentage",
        type: "uint256",
      },
    ],
    name: "setRewardPercentage",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newRewardToken",
        type: "address",
      },
    ],
    name: "setRewardToken",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newStakingToken",
        type: "address",
      },
    ],
    name: "setStakingToken",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "newUnstakeDelay",
        type: "uint256",
      },
    ],
    name: "setUnstakeDelay",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "stake",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "unstake",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405260146000556102586001556104b06002556003805460ff1916905534801561002b57600080fd5b50604051610c91380380610c9183398101604081905261004a916100af565b600480546001600160a01b03199081166001600160a01b0394851617909155600580549091169190921617905560038054610100600160a81b03191661010033021790556100e2565b80516001600160a01b03811681146100aa57600080fd5b919050565b600080604083850312156100c257600080fd5b6100cb83610093565b91506100d960208401610093565b90509250929050565b610ba0806100f16000396000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c80634e71d92d1161008c5780638aee8127116100665780638aee8127146101a2578063a3e301c0146101b5578063a694fc3a146101bd578063c7213163146101d057600080fd5b80634e71d92d1461017457806352830ab21461017c578063619d51941461018f57600080fd5b806309653674146100d45780631aed5354146100e95780631e9b12ef146101005780632def66201461011357806330289c611461011b57806330b75e0414610161575b600080fd5b6100e76100e23660046109fd565b6101d8565b005b6001545b6040519081526020015b60405180910390f35b6100e761010e366004610a16565b610240565b6100e76102d6565b61012e610129366004610a16565b610493565b6040516100f791908151815260208083015190820152604080830151908201526060918201519181019190915260800190565b6100e761016f3660046109fd565b61054e565b6100e76105b0565b6100e761018a3660046109fd565b610764565b6100e761019d366004610a50565b6107c6565b6100e76101b0366004610a16565b610808565b6002546100ed565b6100e76101cb3660046109fd565b61089e565b6000546100ed565b60035461010090046001600160a01b031633146102105760405162461bcd60e51b815260040161020790610a6d565b60405180910390fd5b600081815560405182917f1e3be2efa25bca5bff2215c7b30b31086e703d6aa7d9b9a1f8ba62c5291219ad91a250565b60035461010090046001600160a01b0316331461026f5760405162461bcd60e51b815260040161020790610a6d565b60035460ff166102b45760405162461bcd60e51b815260206004820152601060248201526f14da1bdd5b19081899481b1bd8dad95960821b6044820152606401610207565b600480546001600160a01b0319166001600160a01b0392909216919091179055565b60035460ff16156102f95760405162461bcd60e51b815260040161020790610a90565b336000908152600660209081526040918290208251608081018452815480825260018301549382019390935260028201549381019390935260030154606083015215801590610359575060025481604001516103559190610add565b4211155b61039a5760405162461bcd60e51b815260206004820152601260248201527110d85b9b9bdd081d5b9cdd185ad9481e595d60721b6044820152606401610207565b805133600090815260066020526040812081905560608301516103bc906109a2565b905060006103ca83836109d0565b3360009081526006602052604090206001908101829055549091506103ef9083610af5565b84606001516103fe9190610add565b33600081815260066020526040908190206003019290925560048054925163a9059cbb60e01b815290810191909152602481018590526001600160a01b039091169063a9059cbb906044016020604051808303816000875af1158015610468573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061048c9190610b14565b5050505050565b6104be6040518060800160405280600081526020016000815260200160008152602001600081525090565b336001600160a01b03831614806104e4575060035461010090046001600160a01b031633145b6105005760405162461bcd60e51b815260040161020790610a6d565b506001600160a01b0316600090815260066020908152604091829020825160808101845281548152600182015492810192909252600281015492820192909252600390910154606082015290565b60035461010090046001600160a01b0316331461057d5760405162461bcd60e51b815260040161020790610a6d565b600281905560405181907f528808ea48954eb234cc0b7729dd9212e631876273c63182ba05df55c9c1c92490600090a250565b60035460ff16156105d35760405162461bcd60e51b815260040161020790610a90565b3360009081526006602090815260409182902082516080810184528154815260018201549281018390526002820154938101939093526003015460608301521580156106305750600154816060015161062c9190610add565b4211155b6106735760405162461bcd60e51b8152602060048201526014602482015273139bdd1a1a5b99c81d1bc818db185a5b481e595d60621b6044820152606401610207565b60208101516060820151600090610689906109a2565b336000908152600660205260408120600190810191909155549091506106af9082610af5565b83606001516106be9190610add565b3360009081526006602052604090206003015582516106dd90826109d0565b6106e79083610add565b60055460405163a9059cbb60e01b8152336004820152602481018390529193506001600160a01b03169063a9059cbb906044015b6020604051808303816000875af115801561073a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061075e9190610b14565b50505050565b60035461010090046001600160a01b031633146107935760405162461bcd60e51b815260040161020790610a6d565b600181905560405181907ff6d5312e0ee5be025ff575cd9c7f1306e9d1e34e645e913a30213129d0788d2490600090a250565b60035461010090046001600160a01b031633146107f55760405162461bcd60e51b815260040161020790610a6d565b6003805460ff1916911515919091179055565b60035461010090046001600160a01b031633146108375760405162461bcd60e51b815260040161020790610a6d565b60035460ff1661087c5760405162461bcd60e51b815260206004820152601060248201526f14da1bdd5b19081899481b1bd8dad95960821b6044820152606401610207565b600580546001600160a01b0319166001600160a01b0392909216919091179055565b60035460ff16156108c15760405162461bcd60e51b815260040161020790610a90565b33600090815260066020908152604080832081516080810183528154808252600183015494820194909452600282015492810192909252600301546060820181905290929161091891610913906109a2565b6109d0565b905080826020015161092a9190610add565b33600090815260066020526040812060018101929092554260038301819055600283015581548592919061095f908490610add565b9091555050600480546040516323b872dd60e01b81523392810192909252306024830152604482018590526001600160a01b0316906323b872dd9060640161071b565b60008142116109b357506000919050565b6001546109c08342610b31565b6109ca9190610b48565b92915050565b60006064600054846109e29190610af5565b6109ec9190610b48565b6109f69083610af5565b9392505050565b600060208284031215610a0f57600080fd5b5035919050565b600060208284031215610a2857600080fd5b81356001600160a01b03811681146109f657600080fd5b8015158114610a4d57600080fd5b50565b600060208284031215610a6257600080fd5b81356109f681610a3f565b6020808252600990820152684e6f2061636365737360b81b604082015260600190565b60208082526017908201527f46756e6374696f6e616c697479206973206c6f636b6564000000000000000000604082015260600190565b634e487b7160e01b600052601160045260246000fd5b60008219821115610af057610af0610ac7565b500190565b6000816000190483118215151615610b0f57610b0f610ac7565b500290565b600060208284031215610b2657600080fd5b81516109f681610a3f565b600082821015610b4357610b43610ac7565b500390565b600082610b6557634e487b7160e01b600052601260045260246000fd5b50049056fea26469706673582212201c94fd47503d85696f9215cd650b41c38c793209c5ac0dfc6aa9bb1be30ea65464736f6c634300080d0033";

type StakingPlatformConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: StakingPlatformConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class StakingPlatform__factory extends ContractFactory {
  constructor(...args: StakingPlatformConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    stakingToken: string,
    rewardToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<StakingPlatform> {
    return super.deploy(
      stakingToken,
      rewardToken,
      overrides || {}
    ) as Promise<StakingPlatform>;
  }
  override getDeployTransaction(
    stakingToken: string,
    rewardToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      stakingToken,
      rewardToken,
      overrides || {}
    );
  }
  override attach(address: string): StakingPlatform {
    return super.attach(address) as StakingPlatform;
  }
  override connect(signer: Signer): StakingPlatform__factory {
    return super.connect(signer) as StakingPlatform__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): StakingPlatformInterface {
    return new utils.Interface(_abi) as StakingPlatformInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): StakingPlatform {
    return new Contract(address, _abi, signerOrProvider) as StakingPlatform;
  }
}
