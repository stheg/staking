/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Staker, StakerInterface } from "../Staker";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "a",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "b",
        type: "uint256",
      },
    ],
    name: "add",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5060d88061001f6000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c8063771602f714602d575b600080fd5b603c6038366004605f565b604e565b60405190815260200160405180910390f35b600060588284607f565b9392505050565b600080604083850312156070578182fd5b50508035926020909101359150565b60008219821115609d57634e487b7160e01b81526011600452602481fd5b50019056fea26469706673582212209f3e4c1501fe64dced0e2c3704d222b52771df03346bb65244573081d618cfd264736f6c63430008040033";

type StakerConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: StakerConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Staker__factory extends ContractFactory {
  constructor(...args: StakerConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Staker> {
    return super.deploy(overrides || {}) as Promise<Staker>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Staker {
    return super.attach(address) as Staker;
  }
  override connect(signer: Signer): Staker__factory {
    return super.connect(signer) as Staker__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): StakerInterface {
    return new utils.Interface(_abi) as StakerInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Staker {
    return new Contract(address, _abi, signerOrProvider) as Staker;
  }
}
